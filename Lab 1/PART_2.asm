ORG 0

	ACALL	CONFIGURE_LCD   ;ALWAYS ADD THIS LINE TO YOUR CODES AT THE BEGINNING IN ORDER TO INITIALIZE THE LCD SCREEN
	CLR A
	MOV DPTR,#MYSTRING
	MOV R3, #0D

DATA_LOOP:  			;DATA LOOP THAT PRINTS 'LCD IS OK!'
	MOVC A,@A+DPTR
	JZ READ_START
	ACALL SEND_DATA
	CLR A
	INC DPTR
	SJMP DATA_LOOP

KEYBOARD_LOOP:
	
	ACALL KEYBOARD		; NOW A HAS THE KEY THAT IS PRESSED
	ACALL SEND_DATA 	; SEND DATA TO LCD SCREEN
	SJMP KEYBOARD_LOOP	; DOING ALL OVER AGAIN

READ_START:
 
	MOV R3, #0D
	MOV R4, #0D	
	
	CLR A
	
READ_INPUT:

	CLR A
	ACALL KEYBOARD		; NOW A HAS THE KEY THAT IS PRESSED
	ACALL SEND_DATA 	; SEND DATA TO LCD SCREEN
	CJNE A, #65D, COMPUTE
	SJMP PROCESS
	
COMPUTE:

	CPL C 
	SUBB A, #30H
	MOV R5,A
	Mov A,R4
	MOV B,#10D
	MUL AB
	MOV R3, B
	
	ADD A,R5
	MOV R4,A 
	JC CARRY_PROCESS
	SJMP READ_INPUT	; DOING ALL OVER AGAIN

CARRY_PROCESS:
	CLR C 
	MOV R3, #1D
	SJMP READ_INPUT
	
PROCESS:
	
	MOV A, #0C0H  ; FORCE CURSOR TO THE BEGINNING OF THE SECOND LINE
	ACALL SEND_COMMAND
	ACALL PROCESS_MONTH

	CJNE R3,#1D,  LTMET
	SJMP GTMET
	

	
LTMET:	MOV A, R4
	MOV B, #7D
	DIV AB 
	MOV A, B
    	MOV R0, B      ; Copy index to R0
       	MOV DPTR, #WEEKDAYS_TABLE
    	ACALL PRINT_TABLE_ENTRY
    	LJMP GO_TO_END

GTMET:	MOV A, R4
	MOV B, #7D
	DIV AB 
	MOV A, B
    	MOV R0, B      ; Copy index to R0
       	MOV DPTR, #WEEKDAYS_TABLE2
    	ACALL PRINT_TABLE_ENTRY
    	LJMP GO_TO_END
    	 	
HERE:  
	INC DPTR
    	DJNZ A, HERE
    	SJMP DATA_FINISHED

DATA_FINISHED: 

	MOV A, #0C0H  ; FORCE CURSOR TO THE BEGINNING OF THE SECOND LINE
	ACALL SEND_COMMAND
	
RESULT_LOOP:  			;DATA LOOP THAT PRINTS THE RESULT 

	CLR A
	MOVC A,@A+DPTR
	JZ END_LOOP
	ACALL SEND_DATA
	CLR A
	INC DPTR
	SJMP RESULT_LOOP

PRINT_TABLE_ENTRY:
	
	MOV B, #4D
	MUL AB

LOCATE: JZ ACTUAL_DISPLAY
	DEC A 
	INC DPTR
	SJMP LOCATE

ACTUAL_DISPLAY:

	SETB PSW.4
	MOV R6, #5D
	
LOOP1: 	DJNZ R6, LABEL1 
 	SJMP FINISH
 	
LABEL1:	CLR A									
	MOVC A,@A+DPTR
	ACALL SEND_DATA
	CLR A
	INC DPTR
	SJMP LOOP1

FINISH: 
	CLR PSW.4
	RET

END_LOOP:
	JMP GO_TO_END	

PROCESS_MONTH: ; Note that the register R3 contains the input number from the user. 

	CJNE R3, #1D, CHECK_AGAIN
	SJMP GT_MONTH_METHOD
CHECK_AGAIN:
	CLR C 	
	CJNE R4, #0F5H,  CHECK_AGAIN1
CHECK_AGAIN1:
	JC LT_MONTH_METHOD
	SJMP GT_MONTH_METHOD
			
LT_MONTH_METHOD:
	MOV B, R4
	CLR A
	MOV R6, #0D ; Initialize a register to store the index.  
	MOV R7, #0D
	MOV DPTR, #DAYS_TABLE

LT_SUM_LOOP:
	CLR A
	MOVC A, @A+DPTR
	ADD A, R7
	INC DPTR
	MOV R7, A
	INC R6 
	SUBB A, B
	JNC LT_SUM_LOOP2
	SJMP LT_SUM_LOOP

LT_SUM_LOOP2:
	CLR A
	DEC DP0L
	MOVC A, @A+DPTR
	MOV B, A 
	MOV A, R7
	SUBB A, B
	MOV R7, A 
	MOV B, R4
	MOV A, R6
	SUBB A, #1D
	
	mov DPTR, #MONTHS_TABLE
	ACALL PRINT_TABLE_ENTRY
	MOV A, R4
	MOV B, R7
	SUBB A, B
	ACALL PRINT_NUMBER
	RET

GT_MONTH_METHOD:
	MOV B, R4
	INC B
	MOV A,B
	ADD A, #11D
	MOV R5,A 
	MOV B, R5
	CLR A
	MOV R6, #0D ; Initialize a register to store the index.  
	MOV R7, #0D
	MOV DPTR, #DAYS_TABLE2

GT_SUM_LOOP:
	CLR A
	MOVC A, @A+DPTR
	ADD A, R7
	INC DPTR
	MOV R7, A
	INC R6 
	SUBB A, B
	JNC GT_SUM_LOOP2
	SJMP GT_SUM_LOOP

GT_SUM_LOOP2:
	CLR A
	DEC DP0L
	MOVC A, @A+DPTR
	MOV B, A 
	MOV A, R7
	SUBB A, B
	MOV R7, A 
	MOV B, R5
	MOV A, R6
	SUBB A, #1D
	MOV DPTR, #MONTHS_TABLE2
	ACALL PRINT_TABLE_ENTRY
	MOV A, R5
	MOV B, R7
	SUBB A, B
	ACALL PRINT_NUMBER
	RET
	
PRINT_NUMBER:
	MOV B, #10D
	DIV AB
	ADD A, #30H
	ACALL SEND_DATA
	MOV A, B
	ADD A, #30H
	ACALL SEND_DATA
	MOV A, #20H
	ACALL SEND_DATA
	RET 
	
GO_TO_END:

	JMP LOOP
	
CONFIGURE_LCD:	;THIS SUBROUTINE SENDS THE INITIALIZATION COMMANDS TO THE LCD

	MOV A,#38H	;TWO LINES, 5X7 MATRIX
	ACALL SEND_COMMAND
	MOV A,#0FH	;DISPLAY ON, CURSOR BLINKING
	ACALL SEND_COMMAND
	MOV A,#06H	;INCREMENT CURSOR (SHIFT CURSOR TO RIGHT)
	ACALL SEND_COMMAND
	MOV A,#01H	;CLEAR DISPLAY SCREEN
	ACALL SEND_COMMAND
	MOV A,#80H	;FORCE CURSOR TO BEGINNING OF THE FIRST LINE
	ACALL SEND_COMMAND
	RET

SEND_COMMAND: ;THIS SUBROUTINE SENDS THE LCD COMMANDS TO THE LCD

	MOV P1,A		;THE COMMAND IS STORED IN A, SEND IT TO LCD
	CLR P3.5		;RS=0 BEFORE SENDING COMMAND
	CLR P3.6		;R/W=0 TO WRITE
	SETB P3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	ACALL DELAY
	CLR P3.7
	RET

SEND_DATA: ;THIS SUBROUTINE SENDS DATA TO BE DISPLAYED IN AN ASCII FORMAT TO THE LCD

	MOV P1,A		;SEND THE DATA STORED IN A TO LCD
	SETB P3.5	;RS=1 BEFORE SENDING DATA
	CLR P3.6		;R/W=0 TO WRITE
	SETB P3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	ACALL DELAY
	CLR P3.7
	RET

DELAY:

	PUSH 0
	PUSH 1
	MOV R0,#55
	
DELAY_OUTER_LOOP:

	MOV R1,#255
	DJNZ R1,$
	DJNZ R0,DELAY_OUTER_LOOP
	POP 1
	POP 0
	RET
	
KEYBOARD: ; TAKES THE KEY PRESSED FROM THE KEYBOARD AND PUTS IT TO A

	MOV	P0, #0FFH	;MAKES P0 INPUT
	
K1:

	MOV	P2, #0	;GROUND ALL ROWS
	MOV	A, P0
	ANL	A, #00001111B
	CJNE	A, #00001111B, K1
	
K2:

	ACALL	DELAY
	MOV	A, P0
	ANL	A, #00001111B
	CJNE	A, #00001111B, KB_OVER
	SJMP	K2
	
KB_OVER:

	ACALL DELAY
	MOV	A, P0
	ANL	A, #00001111B
	CJNE	A, #00001111B, KB_OVER1
	SJMP	K2
	
KB_OVER1:

	MOV	P2, #11111110B
	MOV	A, P0
	ANL	A, #00001111B
	CJNE	A, #00001111B, ROW_0
	MOV	P2, #11111101B
	MOV	A, P0
	ANL	A, #00001111B
	CJNE	A, #00001111B, ROW_1
	MOV	P2, #11111011B
	MOV	A, P0
	ANL	A, #00001111B
	CJNE	A, #00001111B, ROW_2
	MOV	P2, #11110111B
	MOV	A, P0
	ANL	A, #00001111B
	CJNE	A, #00001111B, ROW_3
	LJMP	K2
	
ROW_0:

	MOV	DPTR, #KCODE0
	SJMP	KB_FIND
	
ROW_1:

	MOV	DPTR, #KCODE1
	SJMP	KB_FIND
	
ROW_2:

	MOV	DPTR, #KCODE2
	SJMP	KB_FIND
	
ROW_3:

	MOV	DPTR, #KCODE3
	
KB_FIND:

	RRC	A
	JNC	KB_MATCH
	INC	DPTR
	SJMP	KB_FIND
	
KB_MATCH:

	CLR	A
	MOVC	A, @A+DPTR; GET ASCII CODE FROM THE TABLE 
	RET

;ASCII LOOK-UP TABLE 
KCODE0:	DB	'1', '2', '3', 'A'
KCODE1:	DB	'4', '5', '6', 'B'
KCODE2:	DB	'7', '8', '9', 'C'
KCODE3:	DB	'*', '0', '#', 'D'


; Display the input indicator string in the LCD. 
MYSTRING: DB 'INPUT= ',0

; Define a lookup table for the abbreviations of the weekdays. 
WEEKDAYS_TABLE: DB 'SUN ', 'MON ', 'TUE ', 'WED ', 'THU ', 'FRI ', 'SAT ',0

WEEKDAYS_TABLE2: DB 'THU ', 'FRI ', 'SAT ','SUN ', 'MON ', 'TUE ', 'WED ', 0

; Define a lookup table for the abbreviations of the months. 
MONTHS_TABLE: DB 'JAN ', 'FEB ', 'MAR ', 'APR ', 'MAY ', 'JUN ', 'JUL ', 'AUG ', 'SEP ', 'OCT ', 'NOV ', 'DEC ', 0

MONTHS_TABLE2: DB 'SEP ', 'OCT ', 'NOV ', 'DEC ', 0

; Define a lookup table for the number of days in each month. 
DAYS_TABLE: DB 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31

DAYS_TABLE2: DB 30, 31, 30, 31

LOOP:
	ACALL KEYBOARD

END




